package main

//Реализовать структуру-счетчик, которая будет инкрементироваться в конкурентной среде. По завершению программа должна выводить итоговое значение счетчика.

import (
	"fmt"
	"sync"
)

// Cтруктура для безопасного счетчика в конкурентной среде.
type Counter struct {
	mu    sync.Mutex // Используется для синхронизации доступа к value.
	value int        // Текущее значение счетчика.
}

// Метод для инкрементации счетчика на единицу.
func (c *Counter) Increment() {
	c.mu.Lock()   // Блокируем доступ к value, чтобы только одна горутина могла его изменять.
	c.value++     // Инкрементируем счетчик на 1.
	c.mu.Unlock() // Освобождаем доступ к value, как только инкрементация завершена.
}

// Метод для безопасного получения текущего значения счетчика.
func (c *Counter) Value() int {
	c.mu.Lock()         // Блокируем доступ к value перед чтением.
	defer c.mu.Unlock() // Отложенное освобождение мьютекса после завершения функции.
	return c.value      // Возвращаем текущее значение счетчика.
}

func main() {
	var wg sync.WaitGroup
	counter := Counter{} // Создаем экземпляр счетчика.

	// Запускаем 1000 горутин, каждая из которых будет инкрементировать счетчик.
	for i := 0; i < 1000; i++ {
		wg.Add(1)
		go func() {
			defer wg.Done()
			counter.Increment()
		}()
	}

	wg.Wait()                    // Ожидаем завершения всех горутин.
	fmt.Println(counter.Value()) // Выводим итоговое значение счетчика.
}
